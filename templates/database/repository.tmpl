package repositories

import (
	"context"
	"go.uber.org/zap"

	"{{ .PackageName }}/internal/models"
	"{{ .PackageName }}/pkg/database"
	"gorm.io/gorm"
{{- if .HasJSON }}
    "gorm.io/datatypes"
{{ end }}
{{- if .HasDecimal }}
    "github.com/shopspring/decimal"
{{ end }}
{{- if .UseSoftDelete }}
    "time"
{{ end }}
)

// {{ .Name.Singular.Title }}RepositoryInterface ...
type {{ .Name.Singular.Title }}RepositoryInterface interface {
	Get(ctx context.Context, scopes ...func(*gorm.DB) *gorm.DB) (*[]models.{{ .Name.Singular.Title }}, error)
    Count(ctx context.Context, scopes ...func(*gorm.DB) *gorm.DB) (int64, error)
	First(ctx context.Context, scopes ...func(*gorm.DB) *gorm.DB) (*models.{{ .Name.Singular.Title }}, error)
	Create(ctx context.Context, model *models.{{ .Name.Singular.Title }}) (*models.{{ .Name.Singular.Title }}, error)
	Save(ctx context.Context, model *models.{{ .Name.Singular.Title }}) (*models.{{ .Name.Singular.Title }}, error)
    Delete(ctx context.Context, model *models.{{ .Name.Singular.Title }}) error
{{- range .Columns}}
{{- if or .IsCommonColumn .IsSystemUseColumn }}
{{- else }}
    By{{ .ObjectName }}(param {{ .ObjectType }}) func(*gorm.DB) *gorm.DB
{{- end -}}
{{- end }}
}

// {{ .Name.Singular.Title }}Repository ...
type {{ .Name.Singular.Title }}Repository struct {
	logger   *zap.Logger
	database *gorm.DB
}

// Get ... Get multiple entities
func (repository *{{ .Name.Singular.Title }}Repository) Get(ctx context.Context, scopes ...func(*gorm.DB) *gorm.DB) (*[]models.{{ .Name.Singular.Title }}, error) {
	var data []models.{{ .Name.Singular.Title }}
    db, ok := database.GetTransaction(ctx)
	if !ok {
		db = repository.database
	}

{{- if or .IsCommonColumn .IsSystemUseColumn }}
    scopes = append(scopes, NotSoftDeleted())

{{- end }}
	if err := db.Scopes(scopes...).Find(&data).Error; err != nil {
		return nil, err
	}

	return &data, nil
}

// Count ... Count entities
func (repository *{{ .Name.Singular.Title }}Repository) Count(ctx context.Context, scopes ...func(*gorm.DB) *gorm.DB) (int64, error) {
    db, ok := database.GetTransaction(ctx)
	if !ok {
		db = repository.database
	}

{{- if or .IsCommonColumn .IsSystemUseColumn }}
    scopes = append(scopes, NotSoftDeleted())

{{- end }}
	var count int64
	model := models.{{ .Name.Singular.Title }}{}
	if err := db.Table(model.TableName()).Scopes(scopes...).Count(&count).Error; err != nil {
		return 0, err
	}

	return count, nil
}

// First ... Get single entity
func (repository *{{ .Name.Singular.Title }}Repository) First(ctx context.Context, scopes ...func(*gorm.DB) *gorm.DB) (*models.{{ .Name.Singular.Title }}, error) {
    db, ok := database.GetTransaction(ctx)
	if !ok {
		db = repository.database
	}

{{- if or .IsCommonColumn .IsSystemUseColumn }}
    scopes = append(scopes, NotSoftDeleted())

{{- end }}
	var model models.{{ .Name.Singular.Title }}
	if err := db.WithContext(ctx).Table(model.TableName()).Scopes(scopes...).First(&model).Error; err != nil {
		return nil, err
	}
	return &model, nil
}

// Create ... Create new entity
func (repository *{{ .Name.Singular.Title }}Repository) Create(ctx context.Context, model *models.{{ .Name.Singular.Title }}) (*models.{{ .Name.Singular.Title }}, error) {
    db, ok := database.GetTransaction(ctx)
	if !ok {
		db = repository.database
	}

	err := db.Create(&model).Error
	if err != nil {
		return nil, err
	}
	return repository.First(ctx, ByID(model.ID))
}

// Save ... Update entity
func (repository *{{ .Name.Singular.Title }}Repository) Save(ctx context.Context, model *models.{{ .Name.Singular.Title }}) (*models.{{ .Name.Singular.Title }}, error) {
    db, ok := database.GetTransaction(ctx)
	if !ok {
		db = repository.database
	}

	err := db.Save(&model).Error
	if err != nil {
		return nil, err
	}
	return repository.First(ctx, ByID(model.ID))
}

// Delete ... Delete entity
func (repository *{{ .Name.Singular.Title }}Repository) Delete(ctx context.Context, model *models.{{ .Name.Singular.Title }}) error {
    db, ok := database.GetTransaction(ctx)
	if !ok {
		db = repository.database
	}

    var checkModel models.{{ .Name.Singular.Title }}
    if err := db.Scopes(ByID(model.ID)).First(&checkModel).Error; err != nil {
        return err
    }
{{- if .UseSoftDelete }}
    checkModel.DeletedAt = time.Now()
    _, err := repository.Save(ctx, &checkModel)
{{- else }}
    err := db.Delete(&models.{{ .Name.Singular.Title }}{ID: model.ID,}).Error
    if err != nil {
        return err
    }
{{- end }}

    return nil
}

{{- range .Columns}}
{{- if or .IsCommonColumn .IsSystemColumn }}
{{- else }}

// By{{ .ObjectName }} ...
func (repository *{{ .TableName.Singular.Title }}Repository) By{{ .ObjectName }}(param {{ .ObjectType }}) func(*gorm.DB) *gorm.DB {
    return func(db *gorm.DB) *gorm.DB {
        return db.Where("{{ .TableName.Original }}.{{ .Name.Original }} = ?", param)
    }
}
{{- end -}}
{{- end }}

// New{{ .Name.Singular.Title }}Repository ... Create new repository
func New{{ .Name.Singular.Title }}Repository(logger *zap.Logger, database *gorm.DB) {{ .Name.Singular.Title }}RepositoryInterface {
	return &{{ .Name.Singular.Title }}Repository{logger: logger, database: database}
}
